{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ContactService from \"../services/ContactService\";\nexport default {\n  name: \"Contacts-data\",\n  data() {\n    return {\n      contacts: [],\n      n: 10,\n      m: 0,\n      previousAvailable: false,\n      nextAvailable: true,\n      sortBy: \"name\",\n      sortDirection: \"asc\"\n    };\n  },\n  methods: {\n    // Kontaktide sorteerimise kriteeriumi määramine\n    setSortCriteria(by) {\n      this.contacts = [];\n      if (this.sortBy === by) {\n        if (this.sortDirection === \"asc\") {\n          this.sortDirection = \"desc\";\n        } else {\n          this.sortDirection = \"asc\";\n        }\n      } else {\n        this.sortBy = by;\n        this.sortDirection = \"asc\";\n      }\n    },\n    // Kas järgmiste / eelmiste kontaktide laadimise nupp peab olema peidetud\n    nextAndPreviousAvailable() {\n      if (this.contacts.length == this.n) {\n        this.nextAvailable = true;\n      } else {\n        this.nextAvailable = false;\n      }\n      if (this.m != 0) {\n        this.previousAvailable = true;\n      } else {\n        this.previousAvailable = false;\n      }\n    },\n    // Järgmiste kontaktide pärimine APIst\n    getNextContacts(n, m) {\n      ContactService.getNafterMcontacts(n, m, this.sortBy + \"_\" + this.sortDirection).then(response => {\n        this.contacts = response.data;\n        var last = this.contacts.pop();\n        this.contacts.push(last);\n        this.nextAndPreviousAvailable();\n      });\n    },\n    // Eelmiste kontaktide pärimine APIst\n    getPreviousContacts(n, m) {\n      ContactService.getNafterMcontacts(n, m, this.sortBy + \"_\" + this.sortDirection).then(response => {\n        this.contacts = response.data;\n        this.nextAndPreviousAvailable();\n      });\n    },\n    // Kontakti andmebaasi lisamine, võttes nime, koodnime ja telefoni. argumendi puudumisel lisab API sellele vaikimisi-väärtuse\n    addContact(name, codename, phone) {\n      ContactService.addContact(name, codename, phone);\n    },\n    // Kontaktide otsimine API kaudu märksõna järgi\n    searchContact(search) {\n      ContactService.searchContact(search).then(response => {\n        this.contacts = response.data;\n        this.nextAndPreviousAvailable();\n      });\n    }\n  },\n  created() {\n    this.getNextContacts(this.n, 0, this.sortBy + \"_\" + this.sortDirection);\n  }\n};","map":{"version":3,"names":["ContactService","name","data","contacts","n","m","previousAvailable","nextAvailable","sortBy","sortDirection","methods","setSortCriteria","by","nextAndPreviousAvailable","length","getNextContacts","getNafterMcontacts","then","response","last","pop","push","getPreviousContacts","addContact","codename","phone","searchContact","search","created"],"sources":["D:\\Projects\\Java\\koodnimed\\Client\\frontend\\src\\components\\Contacts-component.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1 class=\"text-center\">Kontaktid</h1>\r\n\r\n    <!-- Kontaktide list -->\r\n    <table class=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            <button\r\n              @click=\"\r\n                setSortCriteria('name');\r\n                getNextContacts(n, 0);\r\n              \"\r\n            >\r\n              Nimi\r\n            </button>\r\n          </th>\r\n          <th>\r\n            <button\r\n              @click=\"\r\n                setSortCriteria('codename');\r\n                getNextContacts(n, 0);\r\n              \"\r\n            >\r\n              Koodnimi\r\n            </button>\r\n          </th>\r\n          <th>\r\n            <button\r\n              @click=\"\r\n                setSortCriteria('phone');\r\n                getNextContacts(n, 0);\r\n              \"\r\n            >\r\n              Telefon\r\n            </button>\r\n          </th>\r\n        </tr>\r\n        <p>{{ sortBy }} {{ sortDirection }}</p>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"contact in contacts\" v-bind:key=\"contact.id\">\r\n          <!-- <td> {{contact.id }}</td> -->\r\n          <td>{{ contact.name }}</td>\r\n          <td>{{ contact.codename }}</td>\r\n          <td>{{ contact.phone }}</td>\r\n        </tr>\r\n        <div>\r\n          <button\r\n            v-if=\"previousAvailable\"\r\n            @click=\"getPreviousContacts(n, (m -= n))\"\r\n          >\r\n            &lt;\r\n          </button>\r\n          <button v-if=\"nextAvailable\" @click=\"getNextContacts(n, (m += n))\">\r\n            &gt;\r\n          </button>\r\n        </div>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Kontaktide otsimine -->\r\n    <div>\r\n      <h4>Otsi kontakti</h4>\r\n      <input v-model=\"search\" placeholder=\"Otsi\" />\r\n\r\n      <button @click=\"searchContact(search)\">Otsi</button>\r\n    </div>\r\n\r\n    <!-- Uue kontakti lisamine -->\r\n    <div>\r\n      <p>Lisa kontakt</p>\r\n      <input v-model=\"name\" placeholder=\"Nimi\" />\r\n      <input v-model=\"codename\" placeholder=\"Koodnimi\" />\r\n      <input v-model=\"phone\" placeholder=\"Telefon\" />\r\n\r\n      <button @click=\"addContact(name, codename, phone)\">Lisa</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ContactService from \"../services/ContactService\";\r\n\r\nexport default {\r\n  name: \"Contacts-data\",\r\n  data() {\r\n    return {\r\n      contacts: [],\r\n      n: 10,\r\n      m: 0,\r\n      previousAvailable: false,\r\n      nextAvailable: true,\r\n      sortBy: \"name\",\r\n      sortDirection: \"asc\",\r\n    };\r\n  },\r\n  methods: {\r\n    // Kontaktide sorteerimise kriteeriumi määramine\r\n    setSortCriteria(by) {\r\n      this.contacts = [];\r\n      if (this.sortBy === by) {\r\n        if (this.sortDirection === \"asc\") {\r\n          this.sortDirection = \"desc\";\r\n        } else {\r\n          this.sortDirection = \"asc\";\r\n        }\r\n      } else {\r\n        this.sortBy = by;\r\n        this.sortDirection = \"asc\";\r\n      }\r\n    },\r\n\r\n    // Kas järgmiste / eelmiste kontaktide laadimise nupp peab olema peidetud\r\n    nextAndPreviousAvailable() {\r\n      if (this.contacts.length == this.n) {\r\n        this.nextAvailable = true;\r\n      } else {\r\n        this.nextAvailable = false;\r\n      }\r\n      if (this.m != 0) {\r\n        this.previousAvailable = true;\r\n      } else {\r\n        this.previousAvailable = false;\r\n      }\r\n    },\r\n\r\n    // Järgmiste kontaktide pärimine APIst\r\n    getNextContacts(n, m) {\r\n      ContactService.getNafterMcontacts(\r\n        n,\r\n        m,\r\n        this.sortBy + \"_\" + this.sortDirection\r\n      ).then((response) => {\r\n        this.contacts = response.data;\r\n        var last = this.contacts.pop();\r\n        this.contacts.push(last);\r\n        this.nextAndPreviousAvailable();\r\n      });\r\n    },\r\n\r\n    // Eelmiste kontaktide pärimine APIst\r\n    getPreviousContacts(n, m) {\r\n      ContactService.getNafterMcontacts(\r\n        n,\r\n        m,\r\n        this.sortBy + \"_\" + this.sortDirection\r\n      ).then((response) => {\r\n        this.contacts = response.data;\r\n        this.nextAndPreviousAvailable();\r\n      });\r\n    },\r\n\r\n    // Kontakti andmebaasi lisamine, võttes nime, koodnime ja telefoni. argumendi puudumisel lisab API sellele vaikimisi-väärtuse\r\n    addContact(name, codename, phone) {\r\n      ContactService.addContact(name, codename, phone);\r\n    },\r\n\r\n    // Kontaktide otsimine API kaudu märksõna järgi\r\n    searchContact(search) {\r\n      ContactService.searchContact(search).then((response) => {\r\n        this.contacts = response.data;\r\n        this.nextAndPreviousAvailable();\r\n      });\r\n    },\r\n  },\r\n  created() {\r\n    this.getNextContacts(this.n, 0, this.sortBy + \"_\" + this.sortDirection);\r\n  },\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\nth {\r\n  padding-left: 40px;\r\n}\r\ntd {\r\n  padding-left: 40px;\r\n}\r\ntable {\r\n  text-align: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}