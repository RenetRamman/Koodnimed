{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ContactService from '../services/ContactService';\nexport default {\n  name: 'Contacts-data',\n  data() {\n    return {\n      contacts: [],\n      n: 10,\n      m: 0,\n      previousAvailable: false,\n      nextAvailable: true,\n      sortBy: \"name\",\n      sortDirection: \"asc\"\n    };\n  },\n  methods: {\n    setSortCriteria(by) {\n      this.contacts = [];\n      if (this.sortBy === by) {\n        if (this.sortDirection === \"asc\") {\n          this.sortDirection = \"desc\";\n        } else {\n          this.sortDirection = \"asc\";\n        }\n      } else {\n        this.sortBy = by;\n        this.sortDirection = \"asc\";\n      }\n    },\n    nextAndPreviousAvailable() {\n      if (this.contacts.length == this.n) {\n        this.nextAvailable = true;\n      } else {\n        this.nextAvailable = false;\n      }\n      if (this.m != 0) {\n        this.previousAvailable = true;\n      } else {\n        this.previousAvailable = false;\n      }\n    },\n    getNextContacts(n, m) {\n      ContactService.getNafterMcontacts(n, m, this.sortBy + \"_\" + this.sortDirection).then(response => {\n        this.contacts = response.data;\n        var last = this.contacts.pop();\n        this.contacts.push(last);\n        this.nextAndPreviousAvailable();\n      });\n    },\n    getPreviousContacts(n, m) {\n      ContactService.getNafterMcontacts(n, m, this.sortBy + \"_\" + this.sortDirection).then(response => {\n        this.contacts = response.data;\n        this.nextAndPreviousAvailable();\n      });\n    },\n    addContact(name, codename, phone) {\n      ContactService.addContact(name, codename, phone);\n    },\n    searchContact(search, n, m) {\n      ContactService.searchContact(searchn, n, m).then(response => {\n        this.contacts = response.data;\n        this.nextAndPreviousAvailable();\n      });\n    }\n  },\n  created() {\n    this.getNextContacts(this.n, 0, this.sortBy + \"_\" + this.sortDirection);\n  }\n};","map":{"version":3,"names":["ContactService","name","data","contacts","n","m","previousAvailable","nextAvailable","sortBy","sortDirection","methods","setSortCriteria","by","nextAndPreviousAvailable","length","getNextContacts","getNafterMcontacts","then","response","last","pop","push","getPreviousContacts","addContact","codename","phone","searchContact","search","searchn","created"],"sources":["D:\\Projects\\Java\\koodnimed\\Client\\frontend\\src\\components\\Contacts-component.vue"],"sourcesContent":["<template>\r\n    <div class = \"container\">\r\n            \r\n            <h1 class = \"text-center\"> Kontaktid</h1>\r\n\r\n            <table class = \"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th> <button @click=\"setSortCriteria( 'name'); getNextContacts(n, 0)\"> Nimi</button></th>\r\n                        <th> <button @click=\"setSortCriteria( 'codename'); getNextContacts(n, 0)\"> Koodnimi</button></th>\r\n                        <th> <button @click=\"setSortCriteria( 'phone'); getNextContacts(n, 0)\"> Telefon</button></th>\r\n                    </tr>\r\n                    <p>{{sortBy}} {{sortDirection}}</p>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"contact in contacts\" v-bind:key=\"contact.id\">\r\n                        <!-- <td> {{contact.id }}</td> -->\r\n                        <td> {{contact.name }}</td>\r\n                        <td> {{contact.codename}}</td>    \r\n                        <td> {{contact.phone}}</td>\r\n                    </tr>\r\n                    <div>\r\n                        <button v-if=\"previousAvailable\" @click=\"getPreviousContacts(n, m-=n)\">&lt;</button>\r\n                        <button v-if=\"nextAvailable\" @click=\"getNextContacts(n, m+=n)\">&gt;</button>\r\n                    </div>\r\n                </tbody>\r\n            </table>\r\n\r\n            <!-- Search contacts -->\r\n            <div>\r\n                <h4>Otsi kontakti</h4>\r\n                <input v-model=\"search\" placeholder=\"Otsi\">\r\n\r\n                <button @click=\"searchContact(search)\">Otsi</button>\r\n            </div>\r\n            \r\n            <!-- Input for new contacts -->\r\n            <div>\r\n                <p>Lisa kontakt</p>\r\n                <input v-model=\"name\" placeholder=\"Nimi\">\r\n                <input v-model=\"codename\" placeholder=\"Koodnimi\">\r\n                <input v-model=\"phone\" placeholder=\"Telefon\">\r\n                \r\n                <button @click=\"addContact(name, codename, phone)\">Lisa</button>\r\n            </div>\r\n        </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport ContactService from '../services/ContactService';\r\n\r\n\r\nexport default {\r\n    name: 'Contacts-data',\r\n    data(){\r\n        return {\r\n            contacts: [],\r\n            n: 10,\r\n            m: 0,\r\n            previousAvailable: false,\r\n            nextAvailable: true,\r\n            sortBy: \"name\",\r\n            sortDirection: \"asc\"\r\n        }\r\n    },\r\n    methods: {\r\n        setSortCriteria(by) {\r\n            this.contacts = [];\r\n            if (this.sortBy === by) {\r\n                if (this.sortDirection === \"asc\") {\r\n                    this.sortDirection = \"desc\";\r\n                }\r\n                else {\r\n                    this.sortDirection = \"asc\";\r\n                }\r\n            }\r\n            else {\r\n                this.sortBy = by;\r\n                this.sortDirection = \"asc\";\r\n            }\r\n        },\r\n\r\n\r\n        nextAndPreviousAvailable() {\r\n            if (this.contacts.length == this.n) {\r\n                    this.nextAvailable = true\r\n            }\r\n            else {\r\n                this.nextAvailable = false\r\n            }\r\n            if (this.m != 0) {\r\n                this.previousAvailable = true\r\n            }\r\n            else {\r\n                this.previousAvailable = false\r\n            }\r\n        },\r\n\r\n        getNextContacts(n, m) {\r\n            ContactService.getNafterMcontacts(n, m, this.sortBy + \"_\" + this.sortDirection).then((response) => {\r\n                this.contacts = response.data;\r\n                var last = this.contacts.pop();\r\n                this.contacts.push(last);\r\n                this.nextAndPreviousAvailable();\r\n            });\r\n        },\r\n\r\n        getPreviousContacts(n, m) {\r\n            ContactService.getNafterMcontacts(n, m, this.sortBy + \"_\" + this.sortDirection).then((response) => {\r\n                this.contacts = response.data;\r\n                this.nextAndPreviousAvailable();\r\n            });\r\n        },\r\n\r\n        addContact(name, codename, phone) {\r\n            ContactService.addContact(name, codename, phone);\r\n        },\r\n\r\n        searchContact(search, n, m) {\r\n            ContactService.searchContact(searchn, n, m).then((response) => {\r\n                this.contacts = response.data;\r\n                this.nextAndPreviousAvailable();\r\n            });\r\n        }\r\n    },\r\n    created() {\r\n        this.getNextContacts(this.n, 0, this.sortBy + \"_\" + this.sortDirection);\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\nth {\r\n    padding-left: 40px;\r\n}\r\ntd {\r\n    padding-left: 40px;\r\n}\r\ntable {\r\n    text-align: center;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}